Will run the code on one GPU.
| distributed init (rank 0): env://
git:
  sha: 0add0dff8d99d3eb488904c4c722b962a3657257, status: has uncommited changes, branch: QCRI_Cifar10_same_batch_augmentation_correspondence_on_CPU

arch: vit_tiny
batch_size_per_gpu: 40
clip_grad: 3.0
data_path: /home/alij/Datasets/Cifar10/train
dist_url: env://
drop_path_rate: 0.1
epochs: 108
freeze_last_layer: 1
global_crops_number: 2
global_crops_scale: (0.4, 1.0)
global_scale: 224
gpu: 0
local_crops_number: 8
local_crops_scale: (0.05, 0.4)
local_rank: 0
local_scale: 96
lr: 0.0005
min_lr: 1e-06
momentum_teacher: 0.996
norm_last_layer: True
num_workers: 4
optimizer: adamw
out_dim: 1000
output_dir: /home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu
patch_size: 16
rank: 0
saveckp_freq: 20
seed: 0
teacher_temp: 0.04
use_bn_in_head: False
use_fp16: True
warmup_epochs: 10
warmup_teacher_temp: 0.04
warmup_teacher_temp_epochs: 0
weight_decay: 0.04
weight_decay_end: 0.4
world_size: 1
Data loaded: there are 50000 images.
Student and Teacher are built: they are both vit_tiny network.
Loss, optimizer and schedulers ready.
Found checkpoint at /home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth
=> loaded 'student' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
=> loaded 'teacher' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
=> loaded 'optimizer' from checkpoint: '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth'
=> loaded 'fp16_scaler' from checkpoint: '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth'
=> loaded 'dino_loss' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
Starting DINO training !
Epoch: [107/108]  [   0/1250]  eta: 1:33:07  loss: 2.765073 (2.765073)  lr: 0.000001 (0.000001)  wd: 0.399924 (0.399924)  time: 4.470120  data: 2.031483  max mem: 5312
Epoch: [107/108]  [  10/1250]  eta: 0:12:43  loss: 2.422539 (2.566564)  lr: 0.000001 (0.000001)  wd: 0.399924 (0.399924)  time: 0.615990  data: 0.189361  max mem: 5407
Epoch: [107/108]  [  20/1250]  eta: 0:10:08  loss: 2.399365 (2.624999)  lr: 0.000001 (0.000001)  wd: 0.399925 (0.399925)  time: 0.295958  data: 0.070435  max mem: 5409
Epoch: [107/108]  [  30/1250]  eta: 0:09:36  loss: 2.443019 (2.579316)  lr: 0.000001 (0.000001)  wd: 0.399926 (0.399926)  time: 0.393274  data: 0.168469  max mem: 5414
Epoch: [107/108]  [  40/1250]  eta: 0:09:01  loss: 2.511058 (2.596587)  lr: 0.000001 (0.000001)  wd: 0.399927 (0.399926)  time: 0.398697  data: 0.174801  max mem: 5414
Epoch: [107/108]  [  50/1250]  eta: 0:08:38  loss: 2.512634 (2.575940)  lr: 0.000001 (0.000001)  wd: 0.399929 (0.399927)  time: 0.369452  data: 0.146431  max mem: 5414
Epoch: [107/108]  [  60/1250]  eta: 0:08:31  loss: 2.423727 (2.579198)  lr: 0.000001 (0.000001)  wd: 0.399930 (0.399927)  time: 0.393721  data: 0.169943  max mem: 5430
Epoch: [107/108]  [  70/1250]  eta: 0:08:18  loss: 2.471438 (2.613169)  lr: 0.000001 (0.000001)  wd: 0.399931 (0.399928)  time: 0.399706  data: 0.177514  max mem: 5430
Epoch: [107/108]  [  80/1250]  eta: 0:08:11  loss: 2.710496 (2.621609)  lr: 0.000001 (0.000001)  wd: 0.399932 (0.399929)  time: 0.390349  data: 0.169729  max mem: 5430
Epoch: [107/108]  [  90/1250]  eta: 0:07:56  loss: 2.710496 (2.621672)  lr: 0.000001 (0.000001)  wd: 0.399933 (0.399929)  time: 0.366156  data: 0.145160  max mem: 5430
Epoch: [107/108]  [ 100/1250]  eta: 0:07:51  loss: 2.693055 (2.622791)  lr: 0.000001 (0.000001)  wd: 0.399934 (0.399930)  time: 0.367667  data: 0.146346  max mem: 5430
Epoch: [107/108]  [ 110/1250]  eta: 0:07:45  loss: 2.398959 (2.610369)  lr: 0.000001 (0.000001)  wd: 0.399936 (0.399930)  time: 0.400547  data: 0.179006  max mem: 5430
Epoch: [107/108]  [ 120/1250]  eta: 0:07:37  loss: 2.534405 (2.605269)  lr: 0.000001 (0.000001)  wd: 0.399937 (0.399931)  time: 0.379156  data: 0.156074  max mem: 5430
Epoch: [107/108]  [ 130/1250]  eta: 0:07:34  loss: 2.515224 (2.593060)  lr: 0.000001 (0.000001)  wd: 0.399938 (0.399931)  time: 0.392074  data: 0.168522  max mem: 5430
Epoch: [107/108]  [ 140/1250]  eta: 0:07:26  loss: 2.481133 (2.587899)  lr: 0.000001 (0.000001)  wd: 0.399939 (0.399932)  time: 0.385011  data: 0.160130  max mem: 5430
Epoch: [107/108]  [ 150/1250]  eta: 0:07:21  loss: 2.457091 (2.576298)  lr: 0.000001 (0.000001)  wd: 0.399940 (0.399933)  time: 0.366962  data: 0.140017  max mem: 5430
Epoch: [107/108]  [ 160/1250]  eta: 0:07:15  loss: 2.481720 (2.592471)  lr: 0.000001 (0.000001)  wd: 0.399941 (0.399933)  time: 0.379914  data: 0.156730  max mem: 5430
Epoch: [107/108]  [ 170/1250]  eta: 0:07:07  loss: 2.629422 (2.586824)  lr: 0.000001 (0.000001)  wd: 0.399942 (0.399934)  time: 0.360226  data: 0.139361  max mem: 5430
Epoch: [107/108]  [ 180/1250]  eta: 0:07:03  loss: 2.468103 (2.584199)  lr: 0.000001 (0.000001)  wd: 0.399943 (0.399934)  time: 0.365070  data: 0.144530  max mem: 5430
Epoch: [107/108]  [ 190/1250]  eta: 0:06:58  loss: 2.476775 (2.584095)  lr: 0.000001 (0.000001)  wd: 0.399944 (0.399935)  time: 0.381635  data: 0.161136  max mem: 5430
Epoch: [107/108]  [ 200/1250]  eta: 0:06:56  loss: 2.623282 (2.585407)  lr: 0.000001 (0.000001)  wd: 0.399945 (0.399935)  time: 0.403478  data: 0.180923  max mem: 5430
Epoch: [107/108]  [ 210/1250]  eta: 0:06:50  loss: 2.761316 (2.593213)  lr: 0.000001 (0.000001)  wd: 0.399946 (0.399936)  time: 0.391851  data: 0.166450  max mem: 5430
Epoch: [107/108]  [ 220/1250]  eta: 0:06:44  loss: 2.805634 (2.602807)  lr: 0.000001 (0.000001)  wd: 0.399947 (0.399936)  time: 0.359222  data: 0.135684  max mem: 5430
Epoch: [107/108]  [ 230/1250]  eta: 0:06:39  loss: 2.427526 (2.598588)  lr: 0.000001 (0.000001)  wd: 0.399948 (0.399937)  time: 0.362571  data: 0.141048  max mem: 5430
Epoch: [107/108]  [ 240/1250]  eta: 0:06:36  loss: 2.427526 (2.599040)  lr: 0.000001 (0.000001)  wd: 0.399949 (0.399938)  time: 0.391919  data: 0.169426  max mem: 5430
Epoch: [107/108]  [ 250/1250]  eta: 0:06:31  loss: 2.539797 (2.604148)  lr: 0.000001 (0.000001)  wd: 0.399950 (0.399938)  time: 0.393100  data: 0.170980  max mem: 5430
Epoch: [107/108]  [ 260/1250]  eta: 0:06:28  loss: 2.605325 (2.604023)  lr: 0.000001 (0.000001)  wd: 0.399951 (0.399939)  time: 0.390634  data: 0.167980  max mem: 5430
Epoch: [107/108]  [ 270/1250]  eta: 0:06:23  loss: 2.550440 (2.603215)  lr: 0.000001 (0.000001)  wd: 0.399952 (0.399939)  time: 0.390603  data: 0.166694  max mem: 5430
Epoch: [107/108]  [ 280/1250]  eta: 0:06:20  loss: 2.468564 (2.598257)  lr: 0.000001 (0.000001)  wd: 0.399953 (0.399940)  time: 0.382627  data: 0.159643  max mem: 5430
Epoch: [107/108]  [ 290/1250]  eta: 0:06:14  loss: 2.285745 (2.590622)  lr: 0.000001 (0.000001)  wd: 0.399954 (0.399940)  time: 0.363131  data: 0.141134  max mem: 5430
Epoch: [107/108]  [ 300/1250]  eta: 0:06:11  loss: 2.496935 (2.593411)  lr: 0.000001 (0.000001)  wd: 0.399955 (0.399941)  time: 0.377810  data: 0.154800  max mem: 5430
Epoch: [107/108]  [ 310/1250]  eta: 0:06:06  loss: 2.546948 (2.591597)  lr: 0.000001 (0.000001)  wd: 0.399956 (0.399941)  time: 0.385290  data: 0.161488  max mem: 5430
Epoch: [107/108]  [ 320/1250]  eta: 0:06:03  loss: 2.584476 (2.597224)  lr: 0.000001 (0.000001)  wd: 0.399957 (0.399942)  time: 0.386815  data: 0.163664  max mem: 5430
Epoch: [107/108]  [ 330/1250]  eta: 0:05:58  loss: 2.633194 (2.599995)  lr: 0.000001 (0.000001)  wd: 0.399958 (0.399942)  time: 0.399906  data: 0.176429  max mem: 5430
Epoch: [107/108]  [ 340/1250]  eta: 0:05:55  loss: 2.633194 (2.603534)  lr: 0.000001 (0.000001)  wd: 0.399959 (0.399943)  time: 0.391475  data: 0.167390  max mem: 5430
Epoch: [107/108]  [ 350/1250]  eta: 0:05:50  loss: 2.625167 (2.602168)  lr: 0.000001 (0.000001)  wd: 0.399960 (0.399943)  time: 0.380477  data: 0.157224  max mem: 5430
Epoch: [107/108]  [ 360/1250]  eta: 0:05:47  loss: 2.419529 (2.599377)  lr: 0.000001 (0.000001)  wd: 0.399961 (0.399944)  time: 0.380977  data: 0.158176  max mem: 5430
Epoch: [107/108]  [ 370/1250]  eta: 0:05:42  loss: 2.407875 (2.593356)  lr: 0.000001 (0.000001)  wd: 0.399961 (0.399944)  time: 0.376649  data: 0.154745  max mem: 5430
Epoch: [107/108]  [ 380/1250]  eta: 0:05:38  loss: 2.445282 (2.593392)  lr: 0.000001 (0.000001)  wd: 0.399962 (0.399945)  time: 0.369688  data: 0.148848  max mem: 5430
Epoch: [107/108]  [ 390/1250]  eta: 0:05:33  loss: 2.551885 (2.591470)  lr: 0.000001 (0.000001)  wd: 0.399963 (0.399945)  time: 0.377911  data: 0.155617  max mem: 5431
Epoch: [107/108]  [ 400/1250]  eta: 0:05:30  loss: 2.532241 (2.589553)  lr: 0.000001 (0.000001)  wd: 0.399964 (0.399946)  time: 0.374469  data: 0.152555  max mem: 5431
Epoch: [107/108]  [ 410/1250]  eta: 0:05:25  loss: 2.559846 (2.591002)  lr: 0.000001 (0.000001)  wd: 0.399965 (0.399946)  time: 0.377576  data: 0.156818  max mem: 5431
Epoch: [107/108]  [ 420/1250]  eta: 0:05:22  loss: 2.630405 (2.592707)  lr: 0.000001 (0.000001)  wd: 0.399966 (0.399947)  time: 0.378427  data: 0.157891  max mem: 5431
Epoch: [107/108]  [ 430/1250]  eta: 0:05:17  loss: 2.571146 (2.593183)  lr: 0.000001 (0.000001)  wd: 0.399966 (0.399947)  time: 0.364275  data: 0.144428  max mem: 5431
Epoch: [107/108]  [ 440/1250]  eta: 0:05:13  loss: 2.571146 (2.593106)  lr: 0.000001 (0.000001)  wd: 0.399967 (0.399948)  time: 0.356246  data: 0.136343  max mem: 5431
Epoch: [107/108]  [ 450/1250]  eta: 0:05:08  loss: 2.613172 (2.592781)  lr: 0.000001 (0.000001)  wd: 0.399968 (0.399948)  time: 0.362163  data: 0.142773  max mem: 5431
Epoch: [107/108]  [ 460/1250]  eta: 0:05:05  loss: 2.622604 (2.594359)  lr: 0.000001 (0.000001)  wd: 0.399969 (0.399948)  time: 0.376864  data: 0.158169  max mem: 5431
Epoch: [107/108]  [ 470/1250]  eta: 0:05:00  loss: 2.622604 (2.596041)  lr: 0.000001 (0.000001)  wd: 0.399970 (0.399949)  time: 0.388141  data: 0.167481  max mem: 5431
Epoch: [107/108]  [ 480/1250]  eta: 0:04:57  loss: 2.559411 (2.595378)  lr: 0.000001 (0.000001)  wd: 0.399970 (0.399949)  time: 0.403301  data: 0.180909  max mem: 5431
Epoch: [107/108]  [ 490/1250]  eta: 0:04:53  loss: 2.450993 (2.594167)  lr: 0.000001 (0.000001)  wd: 0.399971 (0.399950)  time: 0.405132  data: 0.179114  max mem: 5431
Epoch: [107/108]  [ 500/1250]  eta: 0:04:49  loss: 2.397985 (2.592763)  lr: 0.000001 (0.000001)  wd: 0.399972 (0.399950)  time: 0.369373  data: 0.143494  max mem: 5431
Epoch: [107/108]  [ 510/1250]  eta: 0:04:45  loss: 2.420826 (2.591425)  lr: 0.000001 (0.000001)  wd: 0.399973 (0.399951)  time: 0.360525  data: 0.140926  max mem: 5431
Epoch: [107/108]  [ 520/1250]  eta: 0:04:41  loss: 2.573704 (2.591790)  lr: 0.000001 (0.000001)  wd: 0.399973 (0.399951)  time: 0.360462  data: 0.142164  max mem: 5431
Epoch: [107/108]  [ 530/1250]  eta: 0:04:36  loss: 2.631092 (2.593206)  lr: 0.000001 (0.000001)  wd: 0.399974 (0.399952)  time: 0.354906  data: 0.135666  max mem: 5431
Epoch: [107/108]  [ 540/1250]  eta: 0:04:32  loss: 2.631092 (2.594329)  lr: 0.000001 (0.000001)  wd: 0.399975 (0.399952)  time: 0.367146  data: 0.147403  max mem: 5431
Epoch: [107/108]  [ 550/1250]  eta: 0:04:28  loss: 2.639635 (2.595102)  lr: 0.000001 (0.000001)  wd: 0.399975 (0.399952)  time: 0.368085  data: 0.148905  max mem: 5431
Epoch: [107/108]  [ 560/1250]  eta: 0:04:24  loss: 2.467233 (2.590835)  lr: 0.000001 (0.000001)  wd: 0.399976 (0.399953)  time: 0.372844  data: 0.154632  max mem: 5431
Epoch: [107/108]  [ 570/1250]  eta: 0:04:20  loss: 2.467233 (2.589563)  lr: 0.000001 (0.000001)  wd: 0.399977 (0.399953)  time: 0.379778  data: 0.160046  max mem: 5431
Epoch: [107/108]  [ 580/1250]  eta: 0:04:17  loss: 2.487684 (2.589201)  lr: 0.000001 (0.000001)  wd: 0.399977 (0.399954)  time: 0.383864  data: 0.162998  max mem: 5431
Epoch: [107/108]  [ 590/1250]  eta: 0:04:13  loss: 2.518799 (2.591911)  lr: 0.000001 (0.000001)  wd: 0.399978 (0.399954)  time: 0.380192  data: 0.159678  max mem: 5431
Epoch: [107/108]  [ 600/1250]  eta: 0:04:09  loss: 2.520229 (2.590874)  lr: 0.000001 (0.000001)  wd: 0.399979 (0.399955)  time: 0.375223  data: 0.156053  max mem: 5431
Epoch: [107/108]  [ 610/1250]  eta: 0:04:05  loss: 2.582879 (2.595035)  lr: 0.000001 (0.000001)  wd: 0.399979 (0.399955)  time: 0.384320  data: 0.165563  max mem: 5431
Epoch: [107/108]  [ 620/1250]  eta: 0:04:01  loss: 2.746765 (2.598845)  lr: 0.000001 (0.000001)  wd: 0.399980 (0.399955)  time: 0.380565  data: 0.161661  max mem: 5431
Epoch: [107/108]  [ 630/1250]  eta: 0:03:57  loss: 2.573247 (2.600016)  lr: 0.000001 (0.000001)  wd: 0.399981 (0.399956)  time: 0.356120  data: 0.138085  max mem: 5431
Epoch: [107/108]  [ 640/1250]  eta: 0:03:53  loss: 2.680003 (2.604672)  lr: 0.000001 (0.000001)  wd: 0.399981 (0.399956)  time: 0.356027  data: 0.136614  max mem: 5431
Epoch: [107/108]  [ 650/1250]  eta: 0:03:49  loss: 2.755442 (2.604302)  lr: 0.000001 (0.000001)  wd: 0.399982 (0.399957)  time: 0.379693  data: 0.158895  max mem: 5431
Epoch: [107/108]  [ 660/1250]  eta: 0:03:45  loss: 2.553603 (2.603396)  lr: 0.000001 (0.000001)  wd: 0.399982 (0.399957)  time: 0.356503  data: 0.136142  max mem: 5431
Epoch: [107/108]  [ 670/1250]  eta: 0:03:41  loss: 2.512748 (2.602067)  lr: 0.000001 (0.000001)  wd: 0.399983 (0.399957)  time: 0.372480  data: 0.153675  max mem: 5431
Epoch: [107/108]  [ 680/1250]  eta: 0:03:37  loss: 2.453375 (2.600539)  lr: 0.000001 (0.000001)  wd: 0.399984 (0.399958)  time: 0.383678  data: 0.165096  max mem: 5431
Epoch: [107/108]  [ 690/1250]  eta: 0:03:33  loss: 2.454304 (2.600239)  lr: 0.000001 (0.000001)  wd: 0.399984 (0.399958)  time: 0.377930  data: 0.158567  max mem: 5431
Epoch: [107/108]  [ 700/1250]  eta: 0:03:30  loss: 2.590519 (2.599656)  lr: 0.000001 (0.000001)  wd: 0.399985 (0.399959)  time: 0.385365  data: 0.165867  max mem: 5431
Epoch: [107/108]  [ 710/1250]  eta: 0:03:26  loss: 2.637609 (2.602003)  lr: 0.000001 (0.000001)  wd: 0.399985 (0.399959)  time: 0.367740  data: 0.148468  max mem: 5431
Epoch: [107/108]  [ 720/1250]  eta: 0:03:22  loss: 2.646622 (2.601808)  lr: 0.000001 (0.000001)  wd: 0.399986 (0.399959)  time: 0.389925  data: 0.170553  max mem: 5431
Epoch: [107/108]  [ 730/1250]  eta: 0:03:18  loss: 2.422929 (2.601969)  lr: 0.000001 (0.000001)  wd: 0.399986 (0.399960)  time: 0.378480  data: 0.157524  max mem: 5431
Epoch: [107/108]  [ 740/1250]  eta: 0:03:15  loss: 2.662974 (2.606450)  lr: 0.000001 (0.000001)  wd: 0.399987 (0.399960)  time: 0.387688  data: 0.168401  max mem: 5431
Epoch: [107/108]  [ 750/1250]  eta: 0:03:11  loss: 2.702020 (2.605722)  lr: 0.000001 (0.000001)  wd: 0.399987 (0.399960)  time: 0.404827  data: 0.186514  max mem: 5431
Epoch: [107/108]  [ 760/1250]  eta: 0:03:07  loss: 2.691575 (2.609171)  lr: 0.000001 (0.000001)  wd: 0.399988 (0.399961)  time: 0.395512  data: 0.173161  max mem: 5431
Epoch: [107/108]  [ 770/1250]  eta: 0:03:03  loss: 2.691575 (2.609223)  lr: 0.000001 (0.000001)  wd: 0.399988 (0.399961)  time: 0.386253  data: 0.163589  max mem: 5431
Epoch: [107/108]  [ 780/1250]  eta: 0:02:59  loss: 2.502993 (2.608286)  lr: 0.000001 (0.000001)  wd: 0.399989 (0.399961)  time: 0.376926  data: 0.155639  max mem: 5431
Epoch: [107/108]  [ 790/1250]  eta: 0:02:55  loss: 2.411960 (2.606101)  lr: 0.000001 (0.000001)  wd: 0.399989 (0.399962)  time: 0.384573  data: 0.164472  max mem: 5431
Epoch: [107/108]  [ 800/1250]  eta: 0:02:52  loss: 2.434623 (2.604677)  lr: 0.000001 (0.000001)  wd: 0.399990 (0.399962)  time: 0.374452  data: 0.156229  max mem: 5431
Epoch: [107/108]  [ 810/1250]  eta: 0:02:48  loss: 2.430005 (2.605434)  lr: 0.000001 (0.000001)  wd: 0.399990 (0.399963)  time: 0.363399  data: 0.144432  max mem: 5431
Epoch: [107/108]  [ 820/1250]  eta: 0:02:44  loss: 2.429405 (2.604507)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399963)  time: 0.360634  data: 0.138064  max mem: 5431
Epoch: [107/108]  [ 830/1250]  eta: 0:02:40  loss: 2.553712 (2.606362)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399963)  time: 0.370596  data: 0.148913  max mem: 5431
Epoch: [107/108]  [ 840/1250]  eta: 0:02:36  loss: 2.556484 (2.606433)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399964)  time: 0.377842  data: 0.158264  max mem: 5431
Epoch: [107/108]  [ 850/1250]  eta: 0:02:32  loss: 2.580899 (2.606853)  lr: 0.000001 (0.000001)  wd: 0.399992 (0.399964)  time: 0.371159  data: 0.150595  max mem: 5431
Epoch: [107/108]  [ 860/1250]  eta: 0:02:28  loss: 2.580899 (2.606439)  lr: 0.000001 (0.000001)  wd: 0.399992 (0.399964)  time: 0.370187  data: 0.150835  max mem: 5431
Epoch: [107/108]  [ 870/1250]  eta: 0:02:24  loss: 2.570416 (2.605752)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399965)  time: 0.369115  data: 0.150689  max mem: 5431
Epoch: [107/108]  [ 880/1250]  eta: 0:02:21  loss: 2.628327 (2.609279)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399965)  time: 0.376556  data: 0.158407  max mem: 5431
Epoch: [107/108]  [ 890/1250]  eta: 0:02:17  loss: 2.599495 (2.608468)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399965)  time: 0.373620  data: 0.155589  max mem: 5431
Epoch: [107/108]  [ 900/1250]  eta: 0:02:13  loss: 2.555155 (2.608537)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399966)  time: 0.364486  data: 0.145279  max mem: 5431
Epoch: [107/108]  [ 910/1250]  eta: 0:02:09  loss: 2.555155 (2.609176)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399966)  time: 0.370930  data: 0.151067  max mem: 5431
Epoch: [107/108]  [ 920/1250]  eta: 0:02:05  loss: 2.683334 (2.611696)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399966)  time: 0.371652  data: 0.152612  max mem: 5431
Epoch: [107/108]  [ 930/1250]  eta: 0:02:01  loss: 2.701312 (2.611310)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399966)  time: 0.384732  data: 0.165718  max mem: 5431
Epoch: [107/108]  [ 940/1250]  eta: 0:01:58  loss: 2.521074 (2.609895)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399967)  time: 0.401708  data: 0.182652  max mem: 5431
Epoch: [107/108]  [ 950/1250]  eta: 0:01:54  loss: 2.466034 (2.608381)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399967)  time: 0.369214  data: 0.149424  max mem: 5431
Epoch: [107/108]  [ 960/1250]  eta: 0:01:50  loss: 2.500917 (2.609016)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399967)  time: 0.364534  data: 0.144427  max mem: 5431
Epoch: [107/108]  [ 970/1250]  eta: 0:01:46  loss: 2.500917 (2.608776)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399968)  time: 0.392728  data: 0.173758  max mem: 5431
Epoch: [107/108]  [ 980/1250]  eta: 0:01:42  loss: 2.473623 (2.609165)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399968)  time: 0.397200  data: 0.176163  max mem: 5431
Epoch: [107/108]  [ 990/1250]  eta: 0:01:39  loss: 2.470706 (2.608695)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399968)  time: 0.393579  data: 0.171958  max mem: 5431
Epoch: [107/108]  [1000/1250]  eta: 0:01:35  loss: 2.492288 (2.608216)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399969)  time: 0.399039  data: 0.178270  max mem: 5431
Epoch: [107/108]  [1010/1250]  eta: 0:01:31  loss: 2.472402 (2.606774)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399969)  time: 0.399238  data: 0.178018  max mem: 5431
Epoch: [107/108]  [1020/1250]  eta: 0:01:27  loss: 2.470881 (2.607747)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399969)  time: 0.407578  data: 0.187555  max mem: 5431
Epoch: [107/108]  [1030/1250]  eta: 0:01:23  loss: 2.525461 (2.606044)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399969)  time: 0.392898  data: 0.171710  max mem: 5431
Epoch: [107/108]  [1040/1250]  eta: 0:01:20  loss: 2.419225 (2.606459)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399970)  time: 0.382666  data: 0.161728  max mem: 5431
Epoch: [107/108]  [1050/1250]  eta: 0:01:16  loss: 2.556026 (2.607666)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399970)  time: 0.392311  data: 0.173864  max mem: 5431
Epoch: [107/108]  [1060/1250]  eta: 0:01:12  loss: 2.582408 (2.608820)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399970)  time: 0.387659  data: 0.167424  max mem: 5431
Epoch: [107/108]  [1070/1250]  eta: 0:01:08  loss: 2.582408 (2.611234)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399970)  time: 0.404397  data: 0.183618  max mem: 5431
Epoch: [107/108]  [1080/1250]  eta: 0:01:04  loss: 2.752493 (2.611630)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399971)  time: 0.375098  data: 0.154768  max mem: 5431
Epoch: [107/108]  [1090/1250]  eta: 0:01:01  loss: 2.732992 (2.612359)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399971)  time: 0.358004  data: 0.137876  max mem: 5431
Epoch: [107/108]  [1100/1250]  eta: 0:00:57  loss: 2.506182 (2.612073)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399971)  time: 0.360705  data: 0.142160  max mem: 5431
Epoch: [107/108]  [1110/1250]  eta: 0:00:53  loss: 2.485222 (2.612445)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399971)  time: 0.404968  data: 0.186430  max mem: 5431
Epoch: [107/108]  [1120/1250]  eta: 0:00:49  loss: 2.558034 (2.611472)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.388988  data: 0.169399  max mem: 5431
Epoch: [107/108]  [1130/1250]  eta: 0:00:45  loss: 2.526171 (2.610076)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.364386  data: 0.144807  max mem: 5431
Epoch: [107/108]  [1140/1250]  eta: 0:00:41  loss: 2.400204 (2.609010)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.376561  data: 0.158284  max mem: 5431
Epoch: [107/108]  [1150/1250]  eta: 0:00:38  loss: 2.400204 (2.609443)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.389798  data: 0.170750  max mem: 5431
Epoch: [107/108]  [1160/1250]  eta: 0:00:34  loss: 2.475515 (2.609946)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399973)  time: 0.384853  data: 0.163784  max mem: 5431
Epoch: [107/108]  [1170/1250]  eta: 0:00:30  loss: 2.610777 (2.610957)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399973)  time: 0.392769  data: 0.171673  max mem: 5431
Epoch: [107/108]  [1180/1250]  eta: 0:00:26  loss: 2.600105 (2.611361)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399973)  time: 0.407657  data: 0.186704  max mem: 5431
Epoch: [107/108]  [1190/1250]  eta: 0:00:22  loss: 2.604783 (2.612591)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399973)  time: 0.401846  data: 0.180947  max mem: 5431
Epoch: [107/108]  [1200/1250]  eta: 0:00:19  loss: 2.679374 (2.614028)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.383450  data: 0.162809  max mem: 5431
Epoch: [107/108]  [1210/1250]  eta: 0:00:15  loss: 2.573941 (2.613959)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.392954  data: 0.172129  max mem: 5431
Epoch: [107/108]  [1220/1250]  eta: 0:00:11  loss: 2.562402 (2.613832)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.400278  data: 0.180452  max mem: 5431
Epoch: [107/108]  [1230/1250]  eta: 0:00:07  loss: 2.561272 (2.612702)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.400539  data: 0.179644  max mem: 5431
Epoch: [107/108]  [1240/1250]  eta: 0:00:03  loss: 2.408894 (2.611836)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.395226  data: 0.173650  max mem: 5431
Epoch: [107/108]  [1249/1250]  eta: 0:00:00  loss: 2.486600 (2.611620)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.379432  data: 0.160052  max mem: 5431
Epoch: [107/108] Total time: 0:07:58 (0.382610 s / it)
Averaged stats: loss: 2.486600 (2.611620)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)
Training time 0:07:58
Wrote profile results to main_dino.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: main_dino.py
Function: collate_function at line 129

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   129                                           @profile
   130                                           def collate_function(batch, additional_arg):
   131                                               process_seed = random.randint(0, 1000000)
   132                                           
   133                                               # Separate the samples and targets
   134                                               samples, targets = zip(*batch)
   135                                           
   136                                               # Apply augmentations to each sample within the batch
   137                                               augmented_samples = []
   138                                               # augmented_image_samples = []
   139                                               # global1 = []
   140                                               # global2= []
   141                                               # local1 = []
   142                                               # local2 = []
   143                                               # local3 = []
   144                                               # local4 = []
   145                                               # local5 = []
   146                                               # local6 = []
   147                                               # local7 = []
   148                                               # local8 = []
   149                                               for i, sample in enumerate(samples):
   150                                                   augmented_sample = DataAugmentationDINO(additional_arg, sample, process_seed) #, augmented_image_sample
   151                                                   # augmented_image_samples.append(augmented_image_sample)
   152                                                   # if global1 == []:
   153                                                   #     global1 = augmented_image_sample[0].unsqueeze(0)
   154                                                   #     global2 = augmented_image_sample[1].unsqueeze(0)
   155                                                   #     local1 = augmented_image_sample[2].unsqueeze(0)
   156                                                   #     local2 = augmented_image_sample[3].unsqueeze(0)
   157                                                   #     local3 = augmented_image_sample[4].unsqueeze(0)
   158                                                   #     local4 = augmented_image_sample[5].unsqueeze(0)
   159                                                   #     local5 = augmented_image_sample[6].unsqueeze(0)
   160                                                   #     local6 = augmented_image_sample[7].unsqueeze(0)
   161                                                   #     local7 = augmented_image_sample[8].unsqueeze(0)
   162                                                   #     local8 = augmented_image_sample[9].unsqueeze(0)
   163                                                   # else:
   164                                                   #     global1 = torch.cat((global1, augmented_image_sample[0].unsqueeze(0)), 0)
   165                                                   #     global2 = torch.cat((global2, augmented_image_sample[1].unsqueeze(0)), 0)
   166                                                   #     local1 = torch.cat((local1, augmented_image_sample[2].unsqueeze(0)), 0)
   167                                                   #     local2 = torch.cat((local2, augmented_image_sample[3].unsqueeze(0)), 0)
   168                                                   #     local3 = torch.cat((local3, augmented_image_sample[4].unsqueeze(0)), 0)
   169                                                   #     local4 = torch.cat((local4, augmented_image_sample[5].unsqueeze(0)), 0)
   170                                                   #     local5 = torch.cat((local5, augmented_image_sample[6].unsqueeze(0)), 0)
   171                                                   #     local6 = torch.cat((local6, augmented_image_sample[7].unsqueeze(0)), 0)
   172                                                   #     local7 = torch.cat((local7, augmented_image_sample[8].unsqueeze(0)), 0)
   173                                                   #     local8 = torch.cat((local8, augmented_image_sample[9].unsqueeze(0)), 0)
   174                                                   augmented_samples.append(augmented_sample)
   175                                                   # images = [global1, global2, local1, local2, local3, local4, local5, local6, local7, local8]
   176                                               # show_images(augmented_samples, additional_arg.batch_size_per_gpu)
   177                                               
   178                                               # Decompose data:
   179                                               images =[
   180                                                   torch.empty((len(augmented_samples),3,args.global_scale,args.global_scale)),torch.empty((len(augmented_samples),3,args.global_scale,args.global_scale)),
   181                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   182                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   183                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   184                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   185                                               ]
   186                                               for i in range(len(augmented_samples[0])):
   187                                                   for j in range(len(augmented_samples)):
   188                                                       images[i][j] = augmented_samples[j][i].crop_tensor_normed.detach().clone()
   189                                           
   190                                               corrs = [[None for _ in range(additional_arg.global_crops_number + additional_arg.local_crops_number)] for _ in range(additional_arg.global_crops_number)]
   191                                           
   192                                               # Calculate patch correspondences for the last image in the batch
   193                                               # which is also equal to other images in the batch:
   194                                           
   195                                               for iq in range(additional_arg.global_crops_number):
   196                                                   for v in range(additional_arg.global_crops_number + additional_arg.local_crops_number):
   197                                                       if v == iq:
   198                                                           # we skip cases where student and teacher operate on the same view
   199                                                           continue
   200                                           
   201                                                       corrs[iq][v] = correspondences(augmented_sample[iq], augmented_sample[v])
   202                                               
   203                                               # Return the augmented samples, correspondences, and targets as a batch
   204                                               return images, corrs, targets

Total time: 477.933 s
File: main_dino.py
Function: train_one_epoch at line 490

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   490                                           @profile
   491                                           def train_one_epoch(student, teacher, teacher_without_ddp, dino_loss, data_loader,
   492                                                               optimizer, lr_schedule, wd_schedule, momentum_schedule,epoch,
   493                                                               fp16_scaler, args):
   494         1         20.2     20.2      0.0      metric_logger = utils.MetricLogger(delimiter="  ")
   495         1          5.6      5.6      0.0      header = 'Epoch: [{}/{}]'.format(epoch, args.epochs)
   496      1250  200648004.6 160518.4     42.0      for it, (images, corrs, _) in enumerate(metric_logger.log_every(data_loader, 10, header)):
   497                                                   # show_batch_images(data, args.batch_size_per_gpu)
   498                                           
   499                                                   # update weight decay and learning rate according to their schedule
   500      1250      16697.8     13.4      0.0          it = len(data_loader) * epoch + it  # global training iteration
   501      2500       3899.2      1.6      0.0          for i, param_group in enumerate(optimizer.param_groups):
   502      2500       5394.5      2.2      0.0              param_group["lr"] = lr_schedule[it]
   503      1250        790.0      0.6      0.0              if i == 0:  # only the first group is regularized
   504      1250       1548.0      1.2      0.0                  param_group["weight_decay"] = wd_schedule[it]
   505                                           
   506                                                   # # Decompose data:
   507                                                   # images =[
   508                                                   #     torch.empty((len(data),3,args.global_scale,args.global_scale)),torch.empty((len(data),3,args.global_scale,args.global_scale)),
   509                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   510                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   511                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   512                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   513                                                   # ]
   514                                                   # for i in range(len(data[0])):
   515                                                   #     for j in range(len(data)):
   516                                                   #         images[i][j] = data[j][i].crop_tensor_normed.detach().clone()
   517                                           
   518                                                   # move images to gpu
   519      1250     269358.1    215.5      0.1          images = [im.cuda(non_blocking=True) for im in images]
   520                                                   # teacher and student forward passes + compute dino loss
   521      1250      57062.8     45.7      0.0          with torch.cuda.amp.autocast(fp16_scaler is not None):
   522      1250   18938639.8  15150.9      4.0              teacher_output = teacher(images[:2], args.batch_size_per_gpu, args.local_crops_number, args.patch_size, args.global_scale, args.local_scale)  # only the 2 global views pass through the teacher
   523      1250   67381649.8  53905.3     14.1              student_output = student(images, args.batch_size_per_gpu, args.local_crops_number, args.patch_size, args.global_scale, args.local_scale)
   524      1250   22297356.3  17837.9      4.7              loss = dino_loss(student_output, teacher_output, corrs, epoch)
   525                                           
   526      1250      49062.7     39.3      0.0          if not math.isfinite(loss.item()):
   527                                                       print("Loss is {}, stopping training".format(loss.item()), force=True)
   528                                                       sys.exit(1)
   529                                           
   530                                                   # student update
   531      1250    1534264.9   1227.4      0.3          optimizer.zero_grad()
   532      1250       6530.0      5.2      0.0          param_norms = None
   533      1250        736.7      0.6      0.0          if fp16_scaler is None:
   534                                                       loss.backward()
   535                                                       if args.clip_grad:
   536                                                           param_norms = utils.clip_gradients(student, args.clip_grad)
   537                                                       utils.cancel_gradients_last_layer(epoch, student,
   538                                                                                         args.freeze_last_layer)
   539                                                       optimizer.step()
   540                                                   else:
   541      1250   86254375.4  69003.5     18.0              fp16_scaler.scale(loss).backward()
   542      1250       4347.0      3.5      0.0              if args.clip_grad:
   543      1250    1927495.7   1542.0      0.4                  fp16_scaler.unscale_(optimizer)  # unscale the gradients of optimizer's assigned params in-place
   544      1250   52521920.2  42017.5     11.0                  param_norms = utils.clip_gradients(student, args.clip_grad)
   545      1250       3329.4      2.7      0.0              utils.cancel_gradients_last_layer(epoch, student,
   546      1250       1036.7      0.8      0.0                                                args.freeze_last_layer)
   547      1250   16924382.5  13539.5      3.5              fp16_scaler.step(optimizer)
   548      1250      54700.1     43.8      0.0              fp16_scaler.update()
   549                                           
   550                                                   # EMA update for the teacher
   551      1250      11458.1      9.2      0.0          with torch.no_grad():
   552      1250       3835.5      3.1      0.0              m = momentum_schedule[it]  # momentum parameter
   553    197500    2691628.2     13.6      0.6              for param_q, param_k in zip(student.module.parameters(), teacher_without_ddp.parameters()):
   554    197500    6178474.5     31.3      1.3                  param_k.data.mul_(m).add_((1 - m) * param_q.detach().data)
   555                                           
   556                                                   # logging
   557      1250      79510.0     63.6      0.0          torch.cuda.synchronize()
   558      1250      51533.1     41.2      0.0          metric_logger.update(loss=loss.item())
   559      1250       7142.7      5.7      0.0          metric_logger.update(lr=optimizer.param_groups[0]["lr"])
   560      1250       4606.7      3.7      0.0          metric_logger.update(wd=optimizer.param_groups[0]["weight_decay"])
   561                                               # gather the stats from all processes
   562         1       1300.5   1300.5      0.0      metric_logger.synchronize_between_processes()
   563         1        479.4    479.4      0.0      print("Averaged stats:", metric_logger)
   564         1         17.2     17.2      0.0      return {k: meter.global_avg for k, meter in metric_logger.meters.items()}

