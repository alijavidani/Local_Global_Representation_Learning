Will run the code on one GPU.
| distributed init (rank 0): env://
git:
  sha: 0add0dff8d99d3eb488904c4c722b962a3657257, status: has uncommited changes, branch: QCRI_Cifar10_same_batch_augmentation_correspondence_on_CPU

arch: vit_tiny
batch_size_per_gpu: 40
clip_grad: 3.0
data_path: /home/alij/Datasets/Cifar10/train
dist_url: env://
drop_path_rate: 0.1
epochs: 111
freeze_last_layer: 1
global_crops_number: 2
global_crops_scale: (0.4, 1.0)
global_scale: 224
gpu: 0
local_crops_number: 8
local_crops_scale: (0.05, 0.4)
local_rank: 0
local_scale: 96
lr: 0.0005
min_lr: 1e-06
momentum_teacher: 0.996
norm_last_layer: True
num_workers: 16
optimizer: adamw
out_dim: 1000
output_dir: /home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu
patch_size: 16
rank: 0
saveckp_freq: 20
seed: 0
teacher_temp: 0.04
use_bn_in_head: False
use_fp16: True
warmup_epochs: 10
warmup_teacher_temp: 0.04
warmup_teacher_temp_epochs: 0
weight_decay: 0.04
weight_decay_end: 0.4
world_size: 1
Data loaded: there are 50000 images.
Student and Teacher are built: they are both vit_tiny network.
Loss, optimizer and schedulers ready.
Found checkpoint at /home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth
=> loaded 'student' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
=> loaded 'teacher' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
=> loaded 'optimizer' from checkpoint: '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth'
=> loaded 'fp16_scaler' from checkpoint: '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth'
=> loaded 'dino_loss' from checkpoint '/home/alij/RESULTS/Cifar10/Ours/Network_Checkpoints/ali_batch40_on_cpu/checkpoint.pth' with msg <All keys matched successfully>
Starting DINO training !
Epoch: [110/111]  [   0/1250]  eta: 2:30:07  loss: 2.774460 (2.774460)  lr: 0.000001 (0.000001)  wd: 0.399928 (0.399928)  time: 7.205640  data: 2.456554  max mem: 5312
Epoch: [110/111]  [  10/1250]  eta: 0:17:53  loss: 2.691027 (2.671947)  lr: 0.000001 (0.000001)  wd: 0.399928 (0.399928)  time: 0.865476  data: 0.223496  max mem: 5410
Epoch: [110/111]  [  20/1250]  eta: 0:11:30  loss: 2.520935 (2.583113)  lr: 0.000001 (0.000001)  wd: 0.399929 (0.399929)  time: 0.229205  data: 0.000184  max mem: 5412
Epoch: [110/111]  [  30/1250]  eta: 0:09:14  loss: 2.579557 (2.627453)  lr: 0.000001 (0.000001)  wd: 0.399930 (0.399930)  time: 0.228543  data: 0.000185  max mem: 5413
Epoch: [110/111]  [  40/1250]  eta: 0:08:04  loss: 2.497017 (2.562765)  lr: 0.000001 (0.000001)  wd: 0.399931 (0.399930)  time: 0.231144  data: 0.000186  max mem: 5413
Epoch: [110/111]  [  50/1250]  eta: 0:07:20  loss: 2.457851 (2.597121)  lr: 0.000001 (0.000001)  wd: 0.399932 (0.399931)  time: 0.230900  data: 0.000192  max mem: 5413
Epoch: [110/111]  [  60/1250]  eta: 0:06:53  loss: 2.483267 (2.583437)  lr: 0.000001 (0.000001)  wd: 0.399934 (0.399931)  time: 0.238421  data: 0.000185  max mem: 5420
Epoch: [110/111]  [  70/1250]  eta: 0:06:30  loss: 2.451070 (2.580596)  lr: 0.000001 (0.000001)  wd: 0.399935 (0.399932)  time: 0.239723  data: 0.000171  max mem: 5420
Epoch: [110/111]  [  80/1250]  eta: 0:06:12  loss: 2.627238 (2.600484)  lr: 0.000001 (0.000001)  wd: 0.399936 (0.399932)  time: 0.231611  data: 0.000181  max mem: 5420
Epoch: [110/111]  [  90/1250]  eta: 0:05:58  loss: 2.532957 (2.575870)  lr: 0.000001 (0.000001)  wd: 0.399937 (0.399933)  time: 0.229898  data: 0.000183  max mem: 5420
Epoch: [110/111]  [ 100/1250]  eta: 0:05:46  loss: 2.453882 (2.571134)  lr: 0.000001 (0.000001)  wd: 0.399938 (0.399934)  time: 0.230635  data: 0.000169  max mem: 5420
Epoch: [110/111]  [ 110/1250]  eta: 0:05:36  loss: 2.510323 (2.575850)  lr: 0.000001 (0.000001)  wd: 0.399939 (0.399934)  time: 0.233046  data: 0.000165  max mem: 5420
Epoch: [110/111]  [ 120/1250]  eta: 0:05:27  loss: 2.574735 (2.577454)  lr: 0.000001 (0.000001)  wd: 0.399940 (0.399935)  time: 0.233396  data: 0.000184  max mem: 5420
Epoch: [110/111]  [ 130/1250]  eta: 0:05:19  loss: 2.531442 (2.572723)  lr: 0.000001 (0.000001)  wd: 0.399941 (0.399935)  time: 0.232881  data: 0.000187  max mem: 5420
Epoch: [110/111]  [ 140/1250]  eta: 0:05:13  loss: 2.531442 (2.578255)  lr: 0.000001 (0.000001)  wd: 0.399942 (0.399936)  time: 0.235390  data: 0.000184  max mem: 5420
Epoch: [110/111]  [ 150/1250]  eta: 0:05:07  loss: 2.520170 (2.582096)  lr: 0.000001 (0.000001)  wd: 0.399943 (0.399936)  time: 0.236414  data: 0.000178  max mem: 5420
Epoch: [110/111]  [ 160/1250]  eta: 0:05:01  loss: 2.442921 (2.580324)  lr: 0.000001 (0.000001)  wd: 0.399944 (0.399937)  time: 0.235742  data: 0.000191  max mem: 5420
Epoch: [110/111]  [ 170/1250]  eta: 0:04:56  loss: 2.412359 (2.576226)  lr: 0.000001 (0.000001)  wd: 0.399945 (0.399937)  time: 0.236767  data: 0.000211  max mem: 5420
Epoch: [110/111]  [ 180/1250]  eta: 0:04:51  loss: 2.460313 (2.577738)  lr: 0.000001 (0.000001)  wd: 0.399946 (0.399938)  time: 0.236854  data: 0.000201  max mem: 5420
Epoch: [110/111]  [ 190/1250]  eta: 0:04:46  loss: 2.642266 (2.585237)  lr: 0.000001 (0.000001)  wd: 0.399947 (0.399938)  time: 0.237985  data: 0.000186  max mem: 5420
Epoch: [110/111]  [ 200/1250]  eta: 0:04:42  loss: 2.635719 (2.581027)  lr: 0.000001 (0.000001)  wd: 0.399948 (0.399939)  time: 0.238188  data: 0.000171  max mem: 5430
Epoch: [110/111]  [ 210/1250]  eta: 0:04:38  loss: 2.530005 (2.581978)  lr: 0.000001 (0.000001)  wd: 0.399949 (0.399939)  time: 0.238527  data: 0.000169  max mem: 5430
Epoch: [110/111]  [ 220/1250]  eta: 0:04:33  loss: 2.534983 (2.581135)  lr: 0.000001 (0.000001)  wd: 0.399950 (0.399940)  time: 0.238471  data: 0.000194  max mem: 5430
Epoch: [110/111]  [ 230/1250]  eta: 0:04:30  loss: 2.451772 (2.574160)  lr: 0.000001 (0.000001)  wd: 0.399951 (0.399940)  time: 0.237368  data: 0.000207  max mem: 5436
Epoch: [110/111]  [ 240/1250]  eta: 0:04:26  loss: 2.444671 (2.568477)  lr: 0.000001 (0.000001)  wd: 0.399952 (0.399941)  time: 0.244832  data: 0.000189  max mem: 5436
Epoch: [110/111]  [ 250/1250]  eta: 0:04:23  loss: 2.482530 (2.569385)  lr: 0.000001 (0.000001)  wd: 0.399953 (0.399941)  time: 0.251876  data: 0.000171  max mem: 5436
Epoch: [110/111]  [ 260/1250]  eta: 0:04:20  loss: 2.482530 (2.571992)  lr: 0.000001 (0.000001)  wd: 0.399954 (0.399942)  time: 0.247152  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 270/1250]  eta: 0:04:16  loss: 2.578304 (2.574780)  lr: 0.000001 (0.000001)  wd: 0.399955 (0.399942)  time: 0.241937  data: 0.000206  max mem: 5436
Epoch: [110/111]  [ 280/1250]  eta: 0:04:13  loss: 2.603165 (2.580710)  lr: 0.000001 (0.000001)  wd: 0.399956 (0.399943)  time: 0.240062  data: 0.000201  max mem: 5436
Epoch: [110/111]  [ 290/1250]  eta: 0:04:10  loss: 2.672527 (2.586349)  lr: 0.000001 (0.000001)  wd: 0.399957 (0.399943)  time: 0.241277  data: 0.000217  max mem: 5436
Epoch: [110/111]  [ 300/1250]  eta: 0:04:06  loss: 2.657067 (2.590235)  lr: 0.000001 (0.000001)  wd: 0.399957 (0.399944)  time: 0.241382  data: 0.000221  max mem: 5436
Epoch: [110/111]  [ 310/1250]  eta: 0:04:03  loss: 2.580049 (2.593005)  lr: 0.000001 (0.000001)  wd: 0.399958 (0.399944)  time: 0.239263  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 320/1250]  eta: 0:04:00  loss: 2.580049 (2.593377)  lr: 0.000001 (0.000001)  wd: 0.399959 (0.399945)  time: 0.238976  data: 0.000170  max mem: 5436
Epoch: [110/111]  [ 330/1250]  eta: 0:03:57  loss: 2.638111 (2.596991)  lr: 0.000001 (0.000001)  wd: 0.399960 (0.399945)  time: 0.239085  data: 0.000186  max mem: 5436
Epoch: [110/111]  [ 340/1250]  eta: 0:03:54  loss: 2.715500 (2.597801)  lr: 0.000001 (0.000001)  wd: 0.399961 (0.399946)  time: 0.240230  data: 0.000204  max mem: 5436
Epoch: [110/111]  [ 350/1250]  eta: 0:03:51  loss: 2.540449 (2.598173)  lr: 0.000001 (0.000001)  wd: 0.399962 (0.399946)  time: 0.244226  data: 0.000201  max mem: 5436
Epoch: [110/111]  [ 360/1250]  eta: 0:03:48  loss: 2.557235 (2.598810)  lr: 0.000001 (0.000001)  wd: 0.399963 (0.399947)  time: 0.244237  data: 0.000174  max mem: 5436
Epoch: [110/111]  [ 370/1250]  eta: 0:03:46  loss: 2.673081 (2.600706)  lr: 0.000001 (0.000001)  wd: 0.399963 (0.399947)  time: 0.248511  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 380/1250]  eta: 0:03:43  loss: 2.649528 (2.599231)  lr: 0.000001 (0.000001)  wd: 0.399964 (0.399948)  time: 0.252200  data: 0.000214  max mem: 5436
Epoch: [110/111]  [ 390/1250]  eta: 0:03:40  loss: 2.500509 (2.597594)  lr: 0.000001 (0.000001)  wd: 0.399965 (0.399948)  time: 0.242037  data: 0.000223  max mem: 5436
Epoch: [110/111]  [ 400/1250]  eta: 0:03:37  loss: 2.500509 (2.594892)  lr: 0.000001 (0.000001)  wd: 0.399966 (0.399949)  time: 0.240094  data: 0.000198  max mem: 5436
Epoch: [110/111]  [ 410/1250]  eta: 0:03:34  loss: 2.623439 (2.596227)  lr: 0.000001 (0.000001)  wd: 0.399967 (0.399949)  time: 0.242480  data: 0.000174  max mem: 5436
Epoch: [110/111]  [ 420/1250]  eta: 0:03:31  loss: 2.465392 (2.590831)  lr: 0.000001 (0.000001)  wd: 0.399967 (0.399949)  time: 0.240172  data: 0.000158  max mem: 5436
Epoch: [110/111]  [ 430/1250]  eta: 0:03:28  loss: 2.346113 (2.585690)  lr: 0.000001 (0.000001)  wd: 0.399968 (0.399950)  time: 0.239585  data: 0.000183  max mem: 5436
Epoch: [110/111]  [ 440/1250]  eta: 0:03:26  loss: 2.345928 (2.581899)  lr: 0.000001 (0.000001)  wd: 0.399969 (0.399950)  time: 0.239194  data: 0.000203  max mem: 5436
Epoch: [110/111]  [ 450/1250]  eta: 0:03:23  loss: 2.396406 (2.580040)  lr: 0.000001 (0.000001)  wd: 0.399970 (0.399951)  time: 0.239626  data: 0.000198  max mem: 5436
Epoch: [110/111]  [ 460/1250]  eta: 0:03:20  loss: 2.366573 (2.577519)  lr: 0.000001 (0.000001)  wd: 0.399970 (0.399951)  time: 0.243723  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 470/1250]  eta: 0:03:17  loss: 2.401374 (2.575350)  lr: 0.000001 (0.000001)  wd: 0.399971 (0.399952)  time: 0.250093  data: 0.000175  max mem: 5436
Epoch: [110/111]  [ 480/1250]  eta: 0:03:15  loss: 2.411454 (2.573374)  lr: 0.000001 (0.000001)  wd: 0.399972 (0.399952)  time: 0.245494  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 490/1250]  eta: 0:03:12  loss: 2.442554 (2.573670)  lr: 0.000001 (0.000001)  wd: 0.399973 (0.399952)  time: 0.238352  data: 0.000182  max mem: 5436
Epoch: [110/111]  [ 500/1250]  eta: 0:03:09  loss: 2.538593 (2.571254)  lr: 0.000001 (0.000001)  wd: 0.399973 (0.399953)  time: 0.240112  data: 0.000202  max mem: 5436
Epoch: [110/111]  [ 510/1250]  eta: 0:03:07  loss: 2.494798 (2.572670)  lr: 0.000001 (0.000001)  wd: 0.399974 (0.399953)  time: 0.240712  data: 0.000210  max mem: 5436
Epoch: [110/111]  [ 520/1250]  eta: 0:03:04  loss: 2.537215 (2.573542)  lr: 0.000001 (0.000001)  wd: 0.399975 (0.399954)  time: 0.247849  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 530/1250]  eta: 0:03:01  loss: 2.425957 (2.572514)  lr: 0.000001 (0.000001)  wd: 0.399975 (0.399954)  time: 0.246824  data: 0.000179  max mem: 5436
Epoch: [110/111]  [ 540/1250]  eta: 0:02:59  loss: 2.625175 (2.574741)  lr: 0.000001 (0.000001)  wd: 0.399976 (0.399955)  time: 0.245869  data: 0.000169  max mem: 5436
Epoch: [110/111]  [ 550/1250]  eta: 0:02:56  loss: 2.483919 (2.571954)  lr: 0.000001 (0.000001)  wd: 0.399977 (0.399955)  time: 0.249900  data: 0.000168  max mem: 5436
Epoch: [110/111]  [ 560/1250]  eta: 0:02:53  loss: 2.433079 (2.569990)  lr: 0.000001 (0.000001)  wd: 0.399977 (0.399955)  time: 0.240850  data: 0.000161  max mem: 5436
Epoch: [110/111]  [ 570/1250]  eta: 0:02:51  loss: 2.557347 (2.571416)  lr: 0.000001 (0.000001)  wd: 0.399978 (0.399956)  time: 0.237761  data: 0.000166  max mem: 5436
Epoch: [110/111]  [ 580/1250]  eta: 0:02:48  loss: 2.557347 (2.567480)  lr: 0.000001 (0.000001)  wd: 0.399979 (0.399956)  time: 0.242005  data: 0.000169  max mem: 5436
Epoch: [110/111]  [ 590/1250]  eta: 0:02:46  loss: 2.480742 (2.569155)  lr: 0.000001 (0.000001)  wd: 0.399979 (0.399957)  time: 0.241034  data: 0.000161  max mem: 5436
Epoch: [110/111]  [ 600/1250]  eta: 0:02:43  loss: 2.631471 (2.572110)  lr: 0.000001 (0.000001)  wd: 0.399980 (0.399957)  time: 0.239225  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 610/1250]  eta: 0:02:40  loss: 2.626494 (2.574094)  lr: 0.000001 (0.000001)  wd: 0.399981 (0.399957)  time: 0.241479  data: 0.000183  max mem: 5436
Epoch: [110/111]  [ 620/1250]  eta: 0:02:38  loss: 2.788932 (2.578079)  lr: 0.000001 (0.000001)  wd: 0.399981 (0.399958)  time: 0.240887  data: 0.000173  max mem: 5436
Epoch: [110/111]  [ 630/1250]  eta: 0:02:35  loss: 2.666531 (2.578490)  lr: 0.000001 (0.000001)  wd: 0.399982 (0.399958)  time: 0.239849  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 640/1250]  eta: 0:02:32  loss: 2.609929 (2.578349)  lr: 0.000001 (0.000001)  wd: 0.399982 (0.399959)  time: 0.239824  data: 0.000170  max mem: 5436
Epoch: [110/111]  [ 650/1250]  eta: 0:02:30  loss: 2.543405 (2.578196)  lr: 0.000001 (0.000001)  wd: 0.399983 (0.399959)  time: 0.239700  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 660/1250]  eta: 0:02:27  loss: 2.415729 (2.576710)  lr: 0.000001 (0.000001)  wd: 0.399983 (0.399959)  time: 0.240206  data: 0.000177  max mem: 5436
Epoch: [110/111]  [ 670/1250]  eta: 0:02:25  loss: 2.415729 (2.578163)  lr: 0.000001 (0.000001)  wd: 0.399984 (0.399960)  time: 0.240300  data: 0.000167  max mem: 5436
Epoch: [110/111]  [ 680/1250]  eta: 0:02:22  loss: 2.411216 (2.576213)  lr: 0.000001 (0.000001)  wd: 0.399984 (0.399960)  time: 0.239768  data: 0.000170  max mem: 5436
Epoch: [110/111]  [ 690/1250]  eta: 0:02:19  loss: 2.411216 (2.574463)  lr: 0.000001 (0.000001)  wd: 0.399985 (0.399960)  time: 0.240237  data: 0.000184  max mem: 5436
Epoch: [110/111]  [ 700/1250]  eta: 0:02:17  loss: 2.531135 (2.575719)  lr: 0.000001 (0.000001)  wd: 0.399986 (0.399961)  time: 0.242554  data: 0.000191  max mem: 5436
Epoch: [110/111]  [ 710/1250]  eta: 0:02:14  loss: 2.560272 (2.575025)  lr: 0.000001 (0.000001)  wd: 0.399986 (0.399961)  time: 0.241575  data: 0.000184  max mem: 5436
Epoch: [110/111]  [ 720/1250]  eta: 0:02:12  loss: 2.468399 (2.577092)  lr: 0.000001 (0.000001)  wd: 0.399987 (0.399961)  time: 0.239445  data: 0.000172  max mem: 5436
Epoch: [110/111]  [ 730/1250]  eta: 0:02:09  loss: 2.586949 (2.578232)  lr: 0.000001 (0.000001)  wd: 0.399987 (0.399962)  time: 0.238782  data: 0.000188  max mem: 5436
Epoch: [110/111]  [ 740/1250]  eta: 0:02:07  loss: 2.593924 (2.579356)  lr: 0.000001 (0.000001)  wd: 0.399988 (0.399962)  time: 0.238031  data: 0.000217  max mem: 5436
Epoch: [110/111]  [ 750/1250]  eta: 0:02:04  loss: 2.557649 (2.579047)  lr: 0.000001 (0.000001)  wd: 0.399988 (0.399963)  time: 0.240581  data: 0.000212  max mem: 5436
Epoch: [110/111]  [ 760/1250]  eta: 0:02:02  loss: 2.504885 (2.579672)  lr: 0.000001 (0.000001)  wd: 0.399988 (0.399963)  time: 0.241368  data: 0.000242  max mem: 5436
Epoch: [110/111]  [ 770/1250]  eta: 0:01:59  loss: 2.504885 (2.579513)  lr: 0.000001 (0.000001)  wd: 0.399989 (0.399963)  time: 0.239428  data: 0.000252  max mem: 5436
Epoch: [110/111]  [ 780/1250]  eta: 0:01:56  loss: 2.578303 (2.579920)  lr: 0.000001 (0.000001)  wd: 0.399989 (0.399964)  time: 0.245830  data: 0.000200  max mem: 5436
Epoch: [110/111]  [ 790/1250]  eta: 0:01:54  loss: 2.488200 (2.579633)  lr: 0.000001 (0.000001)  wd: 0.399990 (0.399964)  time: 0.248281  data: 0.000197  max mem: 5436
Epoch: [110/111]  [ 800/1250]  eta: 0:01:51  loss: 2.437844 (2.580267)  lr: 0.000001 (0.000001)  wd: 0.399990 (0.399964)  time: 0.241100  data: 0.000203  max mem: 5436
Epoch: [110/111]  [ 810/1250]  eta: 0:01:49  loss: 2.601319 (2.581191)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399965)  time: 0.237734  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 820/1250]  eta: 0:01:46  loss: 2.601319 (2.581036)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399965)  time: 0.236993  data: 0.000202  max mem: 5436
Epoch: [110/111]  [ 830/1250]  eta: 0:01:44  loss: 2.566607 (2.582527)  lr: 0.000001 (0.000001)  wd: 0.399991 (0.399965)  time: 0.238268  data: 0.000255  max mem: 5436
Epoch: [110/111]  [ 840/1250]  eta: 0:01:41  loss: 2.534082 (2.584479)  lr: 0.000001 (0.000001)  wd: 0.399992 (0.399965)  time: 0.248010  data: 0.000242  max mem: 5436
Epoch: [110/111]  [ 850/1250]  eta: 0:01:39  loss: 2.610884 (2.585817)  lr: 0.000001 (0.000001)  wd: 0.399992 (0.399966)  time: 0.252716  data: 0.000184  max mem: 5436
Epoch: [110/111]  [ 860/1250]  eta: 0:01:36  loss: 2.465556 (2.584345)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399966)  time: 0.243729  data: 0.000180  max mem: 5436
Epoch: [110/111]  [ 870/1250]  eta: 0:01:34  loss: 2.465556 (2.585090)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399966)  time: 0.237880  data: 0.000196  max mem: 5436
Epoch: [110/111]  [ 880/1250]  eta: 0:01:31  loss: 2.500041 (2.586130)  lr: 0.000001 (0.000001)  wd: 0.399993 (0.399967)  time: 0.238504  data: 0.000208  max mem: 5436
Epoch: [110/111]  [ 890/1250]  eta: 0:01:29  loss: 2.482861 (2.584681)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399967)  time: 0.238953  data: 0.000212  max mem: 5436
Epoch: [110/111]  [ 900/1250]  eta: 0:01:26  loss: 2.507953 (2.584556)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399967)  time: 0.239786  data: 0.000221  max mem: 5436
Epoch: [110/111]  [ 910/1250]  eta: 0:01:24  loss: 2.603242 (2.586256)  lr: 0.000001 (0.000001)  wd: 0.399994 (0.399968)  time: 0.246280  data: 0.000212  max mem: 5436
Epoch: [110/111]  [ 920/1250]  eta: 0:01:21  loss: 2.636511 (2.586236)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399968)  time: 0.245156  data: 0.000221  max mem: 5436
Epoch: [110/111]  [ 930/1250]  eta: 0:01:19  loss: 2.606551 (2.586545)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399968)  time: 0.240086  data: 0.000222  max mem: 5436
Epoch: [110/111]  [ 940/1250]  eta: 0:01:16  loss: 2.463211 (2.585186)  lr: 0.000001 (0.000001)  wd: 0.399995 (0.399969)  time: 0.240444  data: 0.000195  max mem: 5436
Epoch: [110/111]  [ 950/1250]  eta: 0:01:14  loss: 2.606996 (2.588413)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399969)  time: 0.238883  data: 0.000185  max mem: 5436
Epoch: [110/111]  [ 960/1250]  eta: 0:01:11  loss: 2.680034 (2.587389)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399969)  time: 0.237850  data: 0.000202  max mem: 5436
Epoch: [110/111]  [ 970/1250]  eta: 0:01:09  loss: 2.602731 (2.589145)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399969)  time: 0.239923  data: 0.000208  max mem: 5436
Epoch: [110/111]  [ 980/1250]  eta: 0:01:06  loss: 2.602731 (2.591214)  lr: 0.000001 (0.000001)  wd: 0.399996 (0.399970)  time: 0.246128  data: 0.000197  max mem: 5436
Epoch: [110/111]  [ 990/1250]  eta: 0:01:04  loss: 2.398559 (2.588271)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399970)  time: 0.244970  data: 0.000186  max mem: 5436
Epoch: [110/111]  [1000/1250]  eta: 0:01:01  loss: 2.363492 (2.587551)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399970)  time: 0.238963  data: 0.000173  max mem: 5436
Epoch: [110/111]  [1010/1250]  eta: 0:00:59  loss: 2.492043 (2.586967)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399970)  time: 0.238376  data: 0.000172  max mem: 5436
Epoch: [110/111]  [1020/1250]  eta: 0:00:56  loss: 2.558479 (2.587610)  lr: 0.000001 (0.000001)  wd: 0.399997 (0.399971)  time: 0.238257  data: 0.000170  max mem: 5436
Epoch: [110/111]  [1030/1250]  eta: 0:00:54  loss: 2.569860 (2.588660)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399971)  time: 0.237841  data: 0.000181  max mem: 5441
Epoch: [110/111]  [1040/1250]  eta: 0:00:51  loss: 2.569860 (2.588018)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399971)  time: 0.237858  data: 0.000185  max mem: 5441
Epoch: [110/111]  [1050/1250]  eta: 0:00:49  loss: 2.556188 (2.589273)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399972)  time: 0.238211  data: 0.000183  max mem: 5441
Epoch: [110/111]  [1060/1250]  eta: 0:00:46  loss: 2.556188 (2.588985)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399972)  time: 0.236899  data: 0.000179  max mem: 5441
Epoch: [110/111]  [1070/1250]  eta: 0:00:44  loss: 2.489814 (2.587988)  lr: 0.000001 (0.000001)  wd: 0.399998 (0.399972)  time: 0.236417  data: 0.000177  max mem: 5441
Epoch: [110/111]  [1080/1250]  eta: 0:00:41  loss: 2.507424 (2.588652)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.238004  data: 0.000180  max mem: 5441
Epoch: [110/111]  [1090/1250]  eta: 0:00:39  loss: 2.680131 (2.590843)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399972)  time: 0.238005  data: 0.000181  max mem: 5441
Epoch: [110/111]  [1100/1250]  eta: 0:00:36  loss: 2.669581 (2.589820)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399973)  time: 0.237631  data: 0.000182  max mem: 5441
Epoch: [110/111]  [1110/1250]  eta: 0:00:34  loss: 2.462040 (2.589878)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399973)  time: 0.237075  data: 0.000185  max mem: 5441
Epoch: [110/111]  [1120/1250]  eta: 0:00:32  loss: 2.582952 (2.590900)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399973)  time: 0.237294  data: 0.000191  max mem: 5441
Epoch: [110/111]  [1130/1250]  eta: 0:00:29  loss: 2.427846 (2.589459)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399973)  time: 0.239168  data: 0.000189  max mem: 5441
Epoch: [110/111]  [1140/1250]  eta: 0:00:27  loss: 2.387457 (2.589414)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399974)  time: 0.240325  data: 0.000188  max mem: 5441
Epoch: [110/111]  [1150/1250]  eta: 0:00:24  loss: 2.638908 (2.590898)  lr: 0.000001 (0.000001)  wd: 0.399999 (0.399974)  time: 0.239731  data: 0.000195  max mem: 5441
Epoch: [110/111]  [1160/1250]  eta: 0:00:22  loss: 2.638908 (2.589983)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.239016  data: 0.000193  max mem: 5441
Epoch: [110/111]  [1170/1250]  eta: 0:00:19  loss: 2.495498 (2.589384)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399974)  time: 0.237626  data: 0.000201  max mem: 5441
Epoch: [110/111]  [1180/1250]  eta: 0:00:17  loss: 2.439773 (2.589066)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.239447  data: 0.000220  max mem: 5441
Epoch: [110/111]  [1190/1250]  eta: 0:00:14  loss: 2.457676 (2.589411)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.240619  data: 0.000209  max mem: 5441
Epoch: [110/111]  [1200/1250]  eta: 0:00:12  loss: 2.476673 (2.589070)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.239210  data: 0.000195  max mem: 5441
Epoch: [110/111]  [1210/1250]  eta: 0:00:09  loss: 2.493281 (2.590060)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.239744  data: 0.000196  max mem: 5441
Epoch: [110/111]  [1220/1250]  eta: 0:00:07  loss: 2.543524 (2.589385)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399975)  time: 0.241051  data: 0.000228  max mem: 5441
Epoch: [110/111]  [1230/1250]  eta: 0:00:04  loss: 2.469253 (2.589382)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399976)  time: 0.237851  data: 0.000180  max mem: 5441
Epoch: [110/111]  [1240/1250]  eta: 0:00:02  loss: 2.740923 (2.590242)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399976)  time: 0.237028  data: 0.000099  max mem: 5441
Epoch: [110/111]  [1249/1250]  eta: 0:00:00  loss: 2.685781 (2.591192)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399976)  time: 0.238311  data: 0.000091  max mem: 5441
Epoch: [110/111] Total time: 0:05:07 (0.245730 s / it)
Averaged stats: loss: 2.685781 (2.591192)  lr: 0.000001 (0.000001)  wd: 0.400000 (0.399976)
Training time 0:05:07
Wrote profile results to main_dino.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: main_dino.py
Function: collate_function at line 129

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   129                                           @profile
   130                                           def collate_function(batch, additional_arg):
   131                                               process_seed = random.randint(0, 1000000)
   132                                           
   133                                               # Separate the samples and targets
   134                                               samples, targets = zip(*batch)
   135                                           
   136                                               # Apply augmentations to each sample within the batch
   137                                               augmented_samples = []
   138                                               # augmented_image_samples = []
   139                                               # global1 = []
   140                                               # global2= []
   141                                               # local1 = []
   142                                               # local2 = []
   143                                               # local3 = []
   144                                               # local4 = []
   145                                               # local5 = []
   146                                               # local6 = []
   147                                               # local7 = []
   148                                               # local8 = []
   149                                               for i, sample in enumerate(samples):
   150                                                   augmented_sample = DataAugmentationDINO(additional_arg, sample, process_seed) #, augmented_image_sample
   151                                                   # augmented_image_samples.append(augmented_image_sample)
   152                                                   # if global1 == []:
   153                                                   #     global1 = augmented_image_sample[0].unsqueeze(0)
   154                                                   #     global2 = augmented_image_sample[1].unsqueeze(0)
   155                                                   #     local1 = augmented_image_sample[2].unsqueeze(0)
   156                                                   #     local2 = augmented_image_sample[3].unsqueeze(0)
   157                                                   #     local3 = augmented_image_sample[4].unsqueeze(0)
   158                                                   #     local4 = augmented_image_sample[5].unsqueeze(0)
   159                                                   #     local5 = augmented_image_sample[6].unsqueeze(0)
   160                                                   #     local6 = augmented_image_sample[7].unsqueeze(0)
   161                                                   #     local7 = augmented_image_sample[8].unsqueeze(0)
   162                                                   #     local8 = augmented_image_sample[9].unsqueeze(0)
   163                                                   # else:
   164                                                   #     global1 = torch.cat((global1, augmented_image_sample[0].unsqueeze(0)), 0)
   165                                                   #     global2 = torch.cat((global2, augmented_image_sample[1].unsqueeze(0)), 0)
   166                                                   #     local1 = torch.cat((local1, augmented_image_sample[2].unsqueeze(0)), 0)
   167                                                   #     local2 = torch.cat((local2, augmented_image_sample[3].unsqueeze(0)), 0)
   168                                                   #     local3 = torch.cat((local3, augmented_image_sample[4].unsqueeze(0)), 0)
   169                                                   #     local4 = torch.cat((local4, augmented_image_sample[5].unsqueeze(0)), 0)
   170                                                   #     local5 = torch.cat((local5, augmented_image_sample[6].unsqueeze(0)), 0)
   171                                                   #     local6 = torch.cat((local6, augmented_image_sample[7].unsqueeze(0)), 0)
   172                                                   #     local7 = torch.cat((local7, augmented_image_sample[8].unsqueeze(0)), 0)
   173                                                   #     local8 = torch.cat((local8, augmented_image_sample[9].unsqueeze(0)), 0)
   174                                                   augmented_samples.append(augmented_sample)
   175                                                   # images = [global1, global2, local1, local2, local3, local4, local5, local6, local7, local8]
   176                                               # show_images(augmented_samples, additional_arg.batch_size_per_gpu)
   177                                               
   178                                               # Decompose data:
   179                                               images =[
   180                                                   torch.empty((len(augmented_samples),3,args.global_scale,args.global_scale)),torch.empty((len(augmented_samples),3,args.global_scale,args.global_scale)),
   181                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   182                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   183                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   184                                                   torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),torch.empty((len(augmented_samples),3,args.local_scale,args.local_scale)),
   185                                               ]
   186                                               for i in range(len(augmented_samples[0])):
   187                                                   for j in range(len(augmented_samples)):
   188                                                       images[i][j] = augmented_samples[j][i].crop_tensor_normed.detach().clone()
   189                                           
   190                                               corrs = [[None for _ in range(additional_arg.global_crops_number + additional_arg.local_crops_number)] for _ in range(additional_arg.global_crops_number)]
   191                                           
   192                                               # Calculate patch correspondences for the last image in the batch
   193                                               # which is also equal to other images in the batch:
   194                                           
   195                                               for iq in range(additional_arg.global_crops_number):
   196                                                   for v in range(additional_arg.global_crops_number + additional_arg.local_crops_number):
   197                                                       if v == iq:
   198                                                           # we skip cases where student and teacher operate on the same view
   199                                                           continue
   200                                           
   201                                                       corrs[iq][v] = correspondences(augmented_sample[iq], augmented_sample[v])
   202                                               
   203                                               # Return the augmented samples, correspondences, and targets as a batch
   204                                               return images, corrs, targets

Total time: 306.76 s
File: main_dino.py
Function: train_one_epoch at line 490

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   490                                           @profile
   491                                           def train_one_epoch(student, teacher, teacher_without_ddp, dino_loss, data_loader,
   492                                                               optimizer, lr_schedule, wd_schedule, momentum_schedule,epoch,
   493                                                               fp16_scaler, args):
   494         1         16.1     16.1      0.0      metric_logger = utils.MetricLogger(delimiter="  ")
   495         1          5.6      5.6      0.0      header = 'Epoch: [{}/{}]'.format(epoch, args.epochs)
   496      1250    3693266.3   2954.6      1.2      for it, (images, corrs, _) in enumerate(metric_logger.log_every(data_loader, 10, header)):
   497                                                   # show_batch_images(data, args.batch_size_per_gpu)
   498                                           
   499                                                   # update weight decay and learning rate according to their schedule
   500      1250      13237.5     10.6      0.0          it = len(data_loader) * epoch + it  # global training iteration
   501      2500       2771.1      1.1      0.0          for i, param_group in enumerate(optimizer.param_groups):
   502      2500       4721.6      1.9      0.0              param_group["lr"] = lr_schedule[it]
   503      1250        489.3      0.4      0.0              if i == 0:  # only the first group is regularized
   504      1250       1270.2      1.0      0.0                  param_group["weight_decay"] = wd_schedule[it]
   505                                           
   506                                                   # # Decompose data:
   507                                                   # images =[
   508                                                   #     torch.empty((len(data),3,args.global_scale,args.global_scale)),torch.empty((len(data),3,args.global_scale,args.global_scale)),
   509                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   510                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   511                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   512                                                   #     torch.empty((len(data),3,args.local_scale,args.local_scale)),torch.empty((len(data),3,args.local_scale,args.local_scale)),
   513                                                   # ]
   514                                                   # for i in range(len(data[0])):
   515                                                   #     for j in range(len(data)):
   516                                                   #         images[i][j] = data[j][i].crop_tensor_normed.detach().clone()
   517                                           
   518                                                   # move images to gpu
   519      1250     215052.4    172.0      0.1          images = [im.cuda(non_blocking=True) for im in images]
   520                                                   # teacher and student forward passes + compute dino loss
   521      1250      51582.5     41.3      0.0          with torch.cuda.amp.autocast(fp16_scaler is not None):
   522      1250   18548987.9  14839.2      6.0              teacher_output = teacher(images[:2], args.batch_size_per_gpu, args.local_crops_number, args.patch_size, args.global_scale, args.local_scale)  # only the 2 global views pass through the teacher
   523      1250   75858298.6  60686.6     24.7              student_output = student(images, args.batch_size_per_gpu, args.local_crops_number, args.patch_size, args.global_scale, args.local_scale)
   524      1250   25235480.7  20188.4      8.2              loss = dino_loss(student_output, teacher_output, corrs, epoch)
   525                                           
   526      1250      53811.9     43.0      0.0          if not math.isfinite(loss.item()):
   527                                                       print("Loss is {}, stopping training".format(loss.item()), force=True)
   528                                                       sys.exit(1)
   529                                           
   530                                                   # student update
   531      1250    1949342.6   1559.5      0.6          optimizer.zero_grad()
   532      1250      10530.3      8.4      0.0          param_norms = None
   533      1250        681.8      0.5      0.0          if fp16_scaler is None:
   534                                                       loss.backward()
   535                                                       if args.clip_grad:
   536                                                           param_norms = utils.clip_gradients(student, args.clip_grad)
   537                                                       utils.cancel_gradients_last_layer(epoch, student,
   538                                                                                         args.freeze_last_layer)
   539                                                       optimizer.step()
   540                                                   else:
   541      1250   94137654.7  75310.1     30.7              fp16_scaler.scale(loss).backward()
   542      1250       6088.2      4.9      0.0              if args.clip_grad:
   543      1250    2085809.2   1668.6      0.7                  fp16_scaler.unscale_(optimizer)  # unscale the gradients of optimizer's assigned params in-place
   544      1250   56214098.0  44971.3     18.3                  param_norms = utils.clip_gradients(student, args.clip_grad)
   545      1250       2739.1      2.2      0.0              utils.cancel_gradients_last_layer(epoch, student,
   546      1250       1483.3      1.2      0.0                                                args.freeze_last_layer)
   547      1250   18728381.5  14982.7      6.1              fp16_scaler.step(optimizer)
   548      1250      64332.8     51.5      0.0              fp16_scaler.update()
   549                                           
   550                                                   # EMA update for the teacher
   551      1250      15583.6     12.5      0.0          with torch.no_grad():
   552      1250       3891.3      3.1      0.0              m = momentum_schedule[it]  # momentum parameter
   553    197500    2957520.3     15.0      1.0              for param_q, param_k in zip(student.module.parameters(), teacher_without_ddp.parameters()):
   554    197500    6728267.1     34.1      2.2                  param_k.data.mul_(m).add_((1 - m) * param_q.detach().data)
   555                                           
   556                                                   # logging
   557      1250      95900.4     76.7      0.0          torch.cuda.synchronize()
   558      1250      61554.4     49.2      0.0          metric_logger.update(loss=loss.item())
   559      1250       9129.0      7.3      0.0          metric_logger.update(lr=optimizer.param_groups[0]["lr"])
   560      1250       5820.2      4.7      0.0          metric_logger.update(wd=optimizer.param_groups[0]["weight_decay"])
   561                                               # gather the stats from all processes
   562         1       1536.2   1536.2      0.0      metric_logger.synchronize_between_processes()
   563         1        513.4    513.4      0.0      print("Averaged stats:", metric_logger)
   564         1         27.9     27.9      0.0      return {k: meter.global_avg for k, meter in metric_logger.meters.items()}

